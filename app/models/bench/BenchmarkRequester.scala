package models.bench

import java.util.concurrent.atomic.AtomicInteger

import scala.concurrent.duration.{ DurationInt, FiniteDuration }

import org.joda.time.{ DateTime, Interval }

import BenchmarkRequester.{ BenchmarkRequesterConfig, ReqStatsSample }
import akka.actor.{ ActorRef, Cancellable, Props }
import models.ResponseEnvelope
import models.akka.{ CommProxy, DSLinkMode, IntCounter }
import models.rpc._

/**
 * Simulates a Requester that subscribes to a responder's node updates and then repeatedly
 * calls the action that causes that node to be updated
 */
class BenchmarkRequester(linkName: String, proxy: CommProxy, config: BenchmarkRequesterConfig)
  extends AbstractEndpointActor(linkName, DSLinkMode.Requester, proxy, config) {

  import context.dispatcher

  private val ridGen = new IntCounter(1)
  private var invokeJob: Cancellable = null

  private var lastReportedAt: DateTime = _
  private val invokesSent = new AtomicInteger(0)
  private val updatesRcvd = new AtomicInteger(0)

  override def preStart() = {
    super.preStart
    
    lastReportedAt = DateTime.now

    // subscribe to path events
    val subReq = SubscribeRequest(ridGen.inc, SubscriptionPath(config.path, 101))
    proxy ! RequestMessage(localMsgId.inc, None, List(subReq))
    log.info("[{}] subscribed to [{}]", linkName, config.path)

    // schedule action invocation
    val invPath = config.path + "/incCounter"
    invokeJob = context.system.scheduler.schedule(config.timeout, config.timeout) {
      val requests = (1 to config.batchSize) map (_ => InvokeRequest(ridGen.inc, invPath))
      proxy ! RequestMessage(localMsgId.inc, None, requests.toList)
      invokesSent.addAndGet(config.batchSize)
      log.debug("[{}]: sent a batch of {} InvokeRequests to {}", linkName, config.batchSize, config.path)
    }
  }

  override def postStop() = {
    invokeJob.cancel

    // unsubscribe from path
    val unsReq = UnsubscribeRequest(ridGen.inc, List(101))
    proxy ! RequestMessage(localMsgId.inc, None, List(unsReq))
    log.info("Requester[{}] unsubscribed from [{}]", linkName, config.path)

    super.postStop
  }

  override def receive = super.receive orElse {
    case env @ ResponseEnvelope(responses) =>
      log.debug("[{}]: received {}", linkName, env)
      val updateCount = responses.map(_.updates.getOrElse(Nil).size).sum
      updatesRcvd.addAndGet(updateCount)

    case msg => log.warning("[{}]: received unknown message - {}", msg)
  }

  protected def reportStats() = {
    val now = DateTime.now
    val interval = new Interval(lastReportedAt, now)
    val stats = ReqStatsSample(linkName, interval, invokesSent.getAndSet(0), updatesRcvd.getAndSet(0))
    log.debug("[{}]: collected {}", linkName, stats)
    config.statsCollector foreach (_ ! stats)
    lastReportedAt = now
  }
}

/**
 * Factory for [[BenchmarkRequester]] instances.
 */
object BenchmarkRequester {
  import AbstractEndpointActor._

  /**
   * BenchmarkRequester configuration.
   */
  case class BenchmarkRequesterConfig(path: String, batchSize: Int, timeout: FiniteDuration,
                                      statsInterval:  FiniteDuration   = 5 seconds,
                                      statsCollector: Option[ActorRef] = None) extends EndpointConfig

  /**
   * Creates a new [[BenchmarkRequester]] props instance.
   */
  def props(linkName: String, proxy: CommProxy, config: BenchmarkRequesterConfig) =
    Props(new BenchmarkRequester(linkName, proxy, config))

  /**
   * Stats generated by the requester, sent to the stats collector.
   */
  case class ReqStatsSample(id: String, interval: Interval, invokesSent: Int, updatesRcvd: Int)
    extends ReqStatsBehavior { val duration = interval.toDuration }
}