# https://www.playframework.com/documentation/latest/Configuration

# Broker settings
broker {

	name = "broker-akka"

	server-config {
		dsId = "broker-akka-FEuG-dsvoy3Mfh-DY4ZLqxWdcjA9mky2MyCd0DmqTMw"
		publicKey = "BG4OYopcM2q09amKRKsc8N99ns5dybnBYG4Fi8bQVf6fKjyT_KRlPMJCs-3zvnSbBCXzS5fZfi88JuiLYwJY0gc"
		tempKey = "BARngwlfjwD7goZHCh_4iWsP0e3JszsvOtovn1UyPnqZLlSOyoUH1v_Lop0oUFClpVhlzsWAAqur6S8apZaBe4I"
		wsUrl = "/ws"
		httpUri = "/http"
		salt = 1234
		version = "1.1.2"
		updateInterval = 200
		# This line enables ability to use msgpack protocol in DSA messages btw DSLinks and the broker.
		# The commutication switches to MSGPACK when both sides (broker and a DSLINK) support it. if only
		# one side supports - "json" protocol will be used.
		# If you whould like to force using JSON protocol, just delete the "msgpack" string from
		# bellow string array
		format = ["json", "msgpack"]

    keyFilename = ".dslink.key"
	}

	salt = 1234

	subscriptions {
	    reconnectionTimeout = 30
	    queue.capacity = 30
	}

	# web socket configuration
	ws {
	  buffer = 128
	  overflow.strategy = dropNew
	}

	# maximum number of child rows in a single LIST response
	children.per.response = 100

	# response delivery engine
	responder {
		# simple, pooled, pubsub, dpubsub
		group.call.engine = simple

		list.pool.size = 5
		subscribe.pool.size = 5
	}

	# applicable only to clustered deployment
	downstream.shard.count = 100

	query.timeout = 5s

	metrics {
		# jdbc, influxdb or none
		collector = none
		retention {
			default = null
			# uncomment individual retention policies
			# ws_session = "week"
		}

		# uncomment to include geolocation resolution
		# geoip.db = "path-to-geolite.mmdb"
	}

	# true - show raw JSON data; false - show data objects
	logging.show.ws.payload = true
}

# Play Framework settings
play {
	http.secret.key = "y:UduF]/^Rr_IwNoql]>PDPatShuEa07WZpzJm>_?Y4<7BP_Gmpt4?35CACz28D0"
	server.websocket.frame.maxLength = 20000000
	akka.actor-system = "DSASystem"

	# disabling all filters until the security config is finalized
	filters.enabled=[]

	filters.headers {
	  contentSecurityPolicy = "default-src 'self';"
	  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com;"
	  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
	  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
	  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' 'unsafe-inline' cdnjs.cloudflare.com;"
	  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' twitter.com *.xing.com;"
	}

	modules.enabled  += "models.MainModule"

	# Setting up https settings and values
	# For more options check https://www.playframework.com/documentation/2.6.x/SettingsAkkaHttp
	# The manual for creating ROOT sertificate is: https://lightbend.github.io/ssl-config/WSQuickStart.html
	# The property of the generated selfsign key is: CN=Admin, OU=IT, O=Acuitybrands, L=Athlas, ST=CA, C=US
	# Extra properties are: Alias: scala-broker, Password: acuitybrands
	server.https {
		port = 9443

		keyStore.path = "conf/store.jks"
		keyStore.type = "JKS"
		keyStore.password = "acuitybrands"
	}
}

kamon {

  util.filters {

      "akka.tracked-dispatcher" {
        includes = [ "**" ]
      }

      "akka.tracked-router" {
        includes = [ "**" ]
      }

      "ws-actors" {
         includes = [ "DSASystem/user/*/wsActor" ]
      }

      "dslink-downstream-actors" {
         includes = [ "DSASystem/user/downstream/**" ]
      }

      "dslink-upstream-actors" {
         includes = [ "DSASystem/user/upstream/**" ]
      }

      "akka.traced-actor" {
        includes = [ "**" ]
        excludes = [ "DSASystem/system/**"]
      }

  }

  akka.actor-groups = [ "ws-actors", "dslink-downstream-actors", "dslink-upstream-actors" ]
  trace.join-remote-parents-with-same-span-id = true

}

akka.cluster.downing-provider-class = "tanukki.akka.cluster.autodown.MajorityLeaderAutoDowning"

custom-downing {
  stable-after = 20s

  majority-leader-auto-downing {
    majority-member-role = ""
    down-if-in-minority = true
    shutdown-actor-system-on-resolution = true
  }
}

akka.remote.netty.tcp.port=2551


# Akka settings
akka {

    http.parsing {
        uri-parsing-mode = relaxed
    }

	loglevel = "INFO"
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
	logger-startup-timeout = 30s

  extensions = [
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$"
  ]

  persistence {
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
		journal {
			plugin = "akka.persistence.journal.leveldb"
			# plugin = "akka.persistence.journal.inmem"
		}
  }

  actor {
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    kryo {
      idstrategy = "automatic"
      kryo-trace = false
    }

    serialization-bindings {
      "models.akka.DSLinkBaseState" = kryo
			"models.akka.RidTargetsRequesterState" = kryo
			"models.akka.SidTargetsRequesterState" = kryo
			"models.akka.RemoveTargetByRid" = kryo
			"models.akka.RemoveTargetBySid" = kryo
      "models.akka.ResponsesProcessed" = kryo
      "models.akka.RequestsProcessed" = kryo
      "models.akka.DSLinkRegistered" = kryo
      "models.akka.DSLinkUnregistered" = kryo
			"models.akka.LastRidSet" = kryo
      "models.Origin" = kryo
    }
  }
    # temporary fix for StreamRef bug.
    # https://github.com/akka/akka/issues/24934
    # should be fixed in 2.5.13
    # curious thing: max possible timeout for this method is 248 days
	stream.materializer.stream-ref {
         subscription-timeout = 240 days
    }
}

akka.actor.mailbox.requirements {
	"akka.dispatch.BoundedDequeBasedMessageQueueSemantics" = bounded-mailbox
	"akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
}

bounded-mailbox {
	mailbox-type = "akka.dispatch.NonBlockingBoundedMailbox"
	mailbox-capacity = 1000
}

# uncomment to use InfluxDB database for metric collection
#influxdb.host = "localhost"
#influxdb.port = 8086
#influxdb.database = "dsabroker"

# uncomment to use JDBC database for metric collection
#db.default.driver=org.h2.Driver
#db.default.url="jdbc:h2:mem:play"